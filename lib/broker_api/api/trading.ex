# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule BrokerAPI.Api.Trading do
  @moduledoc """
  API calls for all endpoints tagged `Trading`.
  """

  alias BrokerAPI.Connection
  import BrokerAPI.RequestBuilder

  @doc """
  Close All Positions for an Account
  Closes (liquidates) all of the account’s open long and short positions. A response will be provided for each order that is attempted to be cancelled. If an order is no longer cancelable, the server will respond with status 500 and reject the request.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters
    - `:cancel_orders` (boolean()): If true is specified, cancel all open orders before liquidating all positions.

  ### Returns

  - `{:ok, [%PositionClosedResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec close_all_positions_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(BrokerAPI.Model.PositionClosedResponse.t)} | {:error, Tesla.Env.t}
  def close_all_positions_for_account(connection, account_id, opts \\ []) do
    optional_params = %{
      :cancel_orders => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/trading/accounts/#{account_id}/positions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {207, BrokerAPI.Model.PositionClosedResponse},
      {500, false}
    ])
  end

  @doc """
  Close a Position for an Account
  Closes (liquidates) the account’s open position for the given symbol. Works for both long and short positions.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `symbol_or_asset_id` (String.t): The symbol or asset_id 
  - `opts` (keyword): Optional parameters
    - `:qty` (String.t): Optional the number of shares to liquidate. Can accept up to 9 decimal points. Cannot work with percentage
    - `:percentage` (String.t): percentage of position to liquidate. Must be between 0 and 100. Would only sell fractional if position is originally fractional. Can accept up to 9 decimal points. Cannot work with qty

  ### Returns

  - `{:ok, BrokerAPI.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec close_position_for_account_by_symbol(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, BrokerAPI.Model.Order.t} | {:error, Tesla.Env.t}
  def close_position_for_account_by_symbol(connection, account_id, symbol_or_asset_id, opts \\ []) do
    optional_params = %{
      :qty => :query,
      :percentage => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/v1/trading/accounts/#{account_id}/positions/#{symbol_or_asset_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Order}
    ])
  end

  @doc """
  Create an order for an account.
  Create an order for an account.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `create_order_request` (CreateOrderRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_order_for_account(Tesla.Env.client, String.t, BrokerAPI.Model.CreateOrderRequest.t, keyword()) :: {:ok, BrokerAPI.Model.Error.t} | {:ok, BrokerAPI.Model.Order.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def create_order_for_account(connection, account_id, create_order_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/trading/accounts/#{account_id}/orders")
      |> add_param(:body, :body, create_order_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Order},
      {400, BrokerAPI.Model.Error},
      {403, false},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
  Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%OrderClosedResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_all_orders_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, BrokerAPI.Model.Error.t} | {:ok, list(BrokerAPI.Model.OrderClosedResponse.t)} | {:error, Tesla.Env.t}
  def delete_all_orders_for_account(connection, account_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/trading/accounts/#{account_id}/orders")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {207, BrokerAPI.Model.OrderClosedResponse},
      {400, BrokerAPI.Model.Error},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Attempts to cancel an open order.
  Attempts to cancel an open order. If the order is no longer cancelable (for example if the status is \"filled\"), the server will respond with status 422, and reject the request.  Upon acceptance of the cancel request, it returns status 204.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `order_id` (String.t): Order identifier.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_order_for_account(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def delete_order_for_account(connection, account_id, order_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/trading/accounts/#{account_id}/orders/#{order_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, BrokerAPI.Model.Error},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Retrieves a list of orders for the account, filtered by the supplied query parameters.
  Retrieves a list of orders for the account, filtered by the supplied query parameters.  Endpoint defaults to open orders if no parameters are provided.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters
    - `:status` (String.t): Order status to be queried. open, closed or all. Defaults to open.
    - `:limit` (integer()): The maximum number of orders in response. Defaults to 50 and max is 500.
    - `:after` (DateTime.t): The response will include only ones submitted after this timestamp (exclusive.)
    - `:until` (DateTime.t): The response will include only ones submitted until this timestamp (exclusive.)
    - `:direction` (String.t): The chronological order of response based on the submission time. asc or desc. Defaults to desc.
    - `:nested` (boolean()): If true, the result will roll up multi-leg orders under the legs field of primary order.
    - `:symbols` (String.t): A comma-separated list of symbols to filter by.

  ### Returns

  - `{:ok, [%Order{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all_orders_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, BrokerAPI.Model.Error.t} | {:ok, list(BrokerAPI.Model.Order.t)} | {:error, Tesla.Env.t}
  def get_all_orders_for_account(connection, account_id, opts \\ []) do
    optional_params = %{
      :status => :query,
      :limit => :query,
      :after => :query,
      :until => :query,
      :direction => :query,
      :nested => :query,
      :symbols => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/trading/accounts/#{account_id}/orders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Order},
      {400, BrokerAPI.Model.Error},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Retrieves a single order for the given order_id.
  Retrieves a single order for the given order_id.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `order_id` (String.t): Order identifier.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_order_for_account(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, BrokerAPI.Model.Error.t} | {:ok, BrokerAPI.Model.Order.t} | {:error, Tesla.Env.t}
  def get_order_for_account(connection, account_id, order_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/trading/accounts/#{account_id}/orders/#{order_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Order},
      {400, BrokerAPI.Model.Error},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  List open positions for an account
  List open positions for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Position{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_positions_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, list(BrokerAPI.Model.Position.t)} | {:error, Tesla.Env.t}
  def get_positions_for_account(connection, account_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/trading/accounts/#{account_id}/positions")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Position}
    ])
  end

  @doc """
  Get an Open Position for account by Symbol or AssetId
  Retrieves the account’s open position for the given symbol or asset_id.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `symbol_or_asset_id` (String.t): The symbol or asset_id 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Position.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_positions_for_account_by_symbol(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Position.t} | {:error, Tesla.Env.t}
  def get_positions_for_account_by_symbol(connection, account_id, symbol_or_asset_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/trading/accounts/#{account_id}/positions/#{symbol_or_asset_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Position},
      {404, false}
    ])
  end

  @doc """
  Replaces a single order with updated parameters
  Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order. The other attributes remain the same as the existing order.  A success return code from a replaced order does NOT guarantee the existing open order has been replaced. If the existing open order is filled before the replacing (new) order reaches the execution venue, the replacing (new) order is rejected, and these events are sent in the trade_updates stream channel found [here in the market data api](https://alpaca.markets/docs/api-references/market-data-api/#order-updates).  While an order is being replaced, the account's buying power is reduced by the larger of the two orders that have been placed (the old order being replaced, and the newly placed order to replace it). If you are replacing a buy entry order with a higher limit price than the original order, the buying power is calculated based on the newly placed order. If you are replacing it with a lower limit price, the buying power is calculated based on the old order.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `order_id` (String.t): Order identifier.
  - `update_order_request` (UpdateOrderRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_order_for_account(Tesla.Env.client, String.t, String.t, BrokerAPI.Model.UpdateOrderRequest.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Error.t} | {:ok, BrokerAPI.Model.Order.t} | {:error, Tesla.Env.t}
  def replace_order_for_account(connection, account_id, order_id, update_order_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/v1/trading/accounts/#{account_id}/orders/#{order_id}")
      |> add_param(:body, :body, update_order_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Order},
      {400, BrokerAPI.Model.Error},
      {403, false},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Subscribe to Trade Events (SSE)
  The Events API provides event push as well as historical queries via SSE (server sent events).  You can listen to events related to trade updates. Most market trades sent during market hours are filled instantly; you can listen to limit order updates through this endpoint.  Historical events are streamed immediately if queried, and updates are pushed as events occur.  Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200)  ---  Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.  If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:since` (DateTime.t): Format: YYYY-MM-DD
    - `:until` (DateTime.t): Format: YYYY-MM-DD
    - `:since_id` (integer()): 
    - `:until_id` (integer()): 

  ### Returns

  - `{:ok, [%TradeUpdateEvent{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribe_to_trade_sse(Tesla.Env.client, keyword()) :: {:ok, list(BrokerAPI.Model.TradeUpdateEvent.t)} | {:error, Tesla.Env.t}
  def subscribe_to_trade_sse(connection, opts \\ []) do
    optional_params = %{
      :since => :query,
      :until => :query,
      :since_id => :query,
      :until_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/events/trades")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.TradeUpdateEvent}
    ])
  end
end
