# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule BrokerAPI.Api.Funding do
  @moduledoc """
  API calls for all endpoints tagged `Funding`.
  """

  alias BrokerAPI.Connection
  import BrokerAPI.RequestBuilder

  @doc """
  Create an ACH Relationship
  Create a new ACHRelationship for an account  If successful, will return 200 code with a newly created ACH Relationship entity.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `create_ach_relationship_request` (CreateAchRelationshipRequest): Create ACH Relationship 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.AchRelationship.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_ach_relationship_for_account(Tesla.Env.client, String.t, BrokerAPI.Model.CreateAchRelationshipRequest.t, keyword()) :: {:ok, BrokerAPI.Model.Error.t} | {:ok, BrokerAPI.Model.AchRelationship.t} | {:error, Tesla.Env.t}
  def create_ach_relationship_for_account(connection, account_id, create_ach_relationship_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/accounts/#{account_id}/ach_relationships")
      |> add_param(:body, :body, create_ach_relationship_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.AchRelationship},
      {400, BrokerAPI.Model.Error},
      {401, BrokerAPI.Model.Error},
      {409, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Create a Bank Relationship for an account
  If successful, retrieves Bank Relationships for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `create_bank_request` (CreateBankRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Bank.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_recipient_bank(Tesla.Env.client, String.t, BrokerAPI.Model.CreateBankRequest.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Bank.t} | {:error, Tesla.Env.t}
  def create_recipient_bank(connection, account_id, create_bank_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/accounts/#{account_id}/recipient_banks")
      |> add_param(:body, :body, create_bank_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Bank},
      {400, false},
      {409, false}
    ])
  end

  @doc """
  Request a new transfer
  Create a new transfer to an account to fund it.  In the sandbox environment, you can instantly deposit to or withdraw from an account with a virtual money amount. In the production environment, this endpoint is used only for requesting an outgoing (withdrawal) wire transfer at this moment. For the wire transfer (in production), you need to create a bank resource first using the Bank API. For more on how to fund an account in sandbox please check out this tutorial [here](https://alpaca.markets/learn/fund-broker-api/).

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `create_transfer_request` (CreateTransferRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Transfer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_transfer_for_account(Tesla.Env.client, String.t, BrokerAPI.Model.CreateTransferRequest.t, keyword()) :: {:ok, BrokerAPI.Model.Transfer.t} | {:error, Tesla.Env.t}
  def create_transfer_for_account(connection, account_id, create_transfer_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/v1/accounts/#{account_id}/transfers")
      |> add_param(:body, :body, create_transfer_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Transfer}
    ])
  end

  @doc """
  Delete an existing ACH relationship
  Delete an existing ACH relationship for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `ach_relationship_id` (String.t): ACH relationship identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_ach_relationship_from_account(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def delete_ach_relationship_from_account(connection, account_id, ach_relationship_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/accounts/#{account_id}/ach_relationships/#{ach_relationship_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Delete a Bank Relationship for an account
  If successful, deletes Bank Relationship for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `bank_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_recipient_bank(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_recipient_bank(connection, account_id, bank_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/accounts/#{account_id}/recipient_banks/#{bank_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {404, false}
    ])
  end

  @doc """
  Request to close a transfer
  Request to close a transfer

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `transfer_id` (String.t): Tranfer identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_transfer(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def delete_transfer(connection, account_id, transfer_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/accounts/#{account_id}/transfers/#{transfer_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, BrokerAPI.Model.Error}
    ])
  end

  @doc """
  Retrieve ACH Relationships for an account
  Returns a list of ACH Relationships for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters
    - `:statuses` (String.t): Comma-separated status values

  ### Returns

  - `{:ok, [%AchRelationship{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_account_ach_relationships(Tesla.Env.client, String.t, keyword()) :: {:ok, list(BrokerAPI.Model.AchRelationship.t)} | {:error, Tesla.Env.t}
  def get_account_ach_relationships(connection, account_id, opts \\ []) do
    optional_params = %{
      :statuses => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/accounts/#{account_id}/ach_relationships")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.AchRelationship}
    ])
  end

  @doc """
  Retrieve bank relationships for an account
  Retrieves Bank Relationships for an account

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters
    - `:status` (String.t): 
    - `:bank_name` (String.t): 

  ### Returns

  - `{:ok, [%Bank{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipient_banks(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(BrokerAPI.Model.Bank.t)} | {:error, Tesla.Env.t}
  def get_recipient_banks(connection, account_id, opts \\ []) do
    optional_params = %{
      :status => :query,
      :bank_name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/accounts/#{account_id}/recipient_banks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Bank},
      {400, false}
    ])
  end

  @doc """
  Return a list of transfers for an account.
  You can query a list of transfers for an account.   You can filter requested transfers by values such as direction and status. 

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Account identifier.
  - `opts` (keyword): Optional parameters
    - `:direction` (String.t): INCOMING or OUTGOING
    - `:limit` (integer()): 
    - `:offset` (integer()): 

  ### Returns

  - `{:ok, [%Transfer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transfers_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, list(BrokerAPI.Model.Transfer.t)} | {:error, Tesla.Env.t}
  def get_transfers_for_account(connection, account_id, opts \\ []) do
    optional_params = %{
      :direction => :query,
      :limit => :query,
      :offset => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/accounts/#{account_id}/transfers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Transfer}
    ])
  end

  @doc """
  Subscribe to Transfer Events (SSE)
  The Events API provides event push as well as historical queries via SSE (server sent events).  You can listen to transfer status updates as they get processed by our backoffice, for both end-user and firm accounts.  Historical events are streamed immediately if queried, and updates are pushed as events occur.  Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200)  ---  Note for people using the clients generated from this OAS spec. Currently OAS-3 doesn't have full support for representing SSE style responses from an API, so if you are using a generated client and don't specify a `since` and `until` there is a good chance the generated clients will hang waiting for the response to end.  If you require the streaming capabilities we recommend not using the generated clients for this specific usecase until the OAS-3 standards come to a consensus on how to represent this correcting in OAS-3.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:since` (DateTime.t): Format: YYYY-MM-DD
    - `:until` (DateTime.t): Format: YYYY-MM-DD
    - `:since_id` (integer()): 
    - `:until_id` (integer()): 

  ### Returns

  - `{:ok, [%TransferStatusEvent{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribe_to_transfer_status_sse(Tesla.Env.client, keyword()) :: {:ok, list(BrokerAPI.Model.TransferStatusEvent.t)} | {:error, Tesla.Env.t}
  def subscribe_to_transfer_status_sse(connection, opts \\ []) do
    optional_params = %{
      :since => :query,
      :until => :query,
      :since_id => :query,
      :until_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/events/transfers/status")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.TransferStatusEvent}
    ])
  end
end
