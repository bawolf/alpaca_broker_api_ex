# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule BrokerAPI.Api.Assets do
  @moduledoc """
  API calls for all endpoints tagged `Assets`.
  """

  alias BrokerAPI.Connection
  import BrokerAPI.RequestBuilder

  @doc """
  Retrieve an asset by UUID
  Returns the requested asset, if found

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `symbol_or_asset_id` (String.t): you can use either the asset's Id or the symbol to search
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Asset.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_asset_by_symbol_or_id(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, BrokerAPI.Model.Asset.t} | {:error, Tesla.Env.t}
  def get_asset_by_symbol_or_id(connection, symbol_or_asset_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/assets/#{symbol_or_asset_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Asset},
      {404, false}
    ])
  end

  @doc """
  Retrieve all assets
  Returns all assets

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:status` (String.t): Asset status to filter by, will default to `all`
    - `:asset_class` (String.t): Asset class to filter by, `us_equity` or `crypto`. Defaults to `us_equity`

  ### Returns

  - `{:ok, [%Asset{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_assets(Tesla.Env.client, keyword()) :: {:ok, list(BrokerAPI.Model.Asset.t)} | {:error, Tesla.Env.t}
  def get_assets(connection, opts \\ []) do
    optional_params = %{
      :status => :query,
      :asset_class => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/assets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Asset}
    ])
  end
end
