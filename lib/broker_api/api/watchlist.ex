# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule BrokerAPI.Api.Watchlist do
  @moduledoc """
  API calls for all endpoints tagged `Watchlist`.
  """

  alias BrokerAPI.Connection
  import BrokerAPI.RequestBuilder

  @doc """
  Create a new watchlist
  Returns the watchlist object

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Unique identifier of an account.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateWatchlistRequest): 

  ### Returns

  - `{:ok, BrokerAPI.Model.Watchlist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_watchlist_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, BrokerAPI.Model.Watchlist.t} | {:error, Tesla.Env.t}
  def create_watchlist_for_account(connection, account_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/v1/trading/accounts/#{account_id}/watchlists")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Watchlist}
    ])
  end

  @doc """
  Remove a watchlist
  Irrevocably delete a watchlist.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Unique identifier of an account
  - `watchlist_id` (String.t): Unique identifier of a watchlist
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_watchlist_from_account_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_watchlist_from_account_by_id(connection, account_id, watchlist_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/v1/accounts/#{account_id}/watchlists/#{watchlist_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  Retrieve all watchlists
  Fetch a list of all watchlists currently in an account.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Unique identifier of an account.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Watchlist{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_all_watchlists_for_account(Tesla.Env.client, String.t, keyword()) :: {:ok, list(BrokerAPI.Model.Watchlist.t)} | {:error, Tesla.Env.t}
  def get_all_watchlists_for_account(connection, account_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/trading/accounts/#{account_id}/watchlists")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Watchlist}
    ])
  end

  @doc """
  Manage watchlists
  Fetch a single watchlist by identifier.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Unique identifier of an account
  - `watchlist_id` (String.t): Unique identifier of a watchlist
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, BrokerAPI.Model.Watchlist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_watchlist_for_account_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, BrokerAPI.Model.Watchlist.t} | {:error, Tesla.Env.t}
  def get_watchlist_for_account_by_id(connection, account_id, watchlist_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/accounts/#{account_id}/watchlists/#{watchlist_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Watchlist}
    ])
  end

  @doc """
  Update an existing watchlist
  Replace entirely the set of securities contained in the watchlist while optionally renaming it. Destructive operation.

  ### Parameters

  - `connection` (BrokerAPI.Connection): Connection to server
  - `account_id` (String.t): Unique identifier of an account
  - `watchlist_id` (String.t): Unique identifier of a watchlist
  - `opts` (keyword): Optional parameters
    - `:body` (CreateWatchlistRequest): 

  ### Returns

  - `{:ok, BrokerAPI.Model.Watchlist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replace_watchlist_for_account_by_id(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, BrokerAPI.Model.Watchlist.t} | {:error, Tesla.Env.t}
  def replace_watchlist_for_account_by_id(connection, account_id, watchlist_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/v1/accounts/#{account_id}/watchlists/#{watchlist_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, BrokerAPI.Model.Watchlist}
    ])
  end
end
