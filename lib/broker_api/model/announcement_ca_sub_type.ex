# NOTE: This file is auto generated by OpenAPI Generator 7.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule BrokerAPI.Model.AnnouncementCaSubType do
  @moduledoc """
  Announcements have both a type and a subtype to categorize them. This model represents the lowever level abstract \"sub types\" of Announcement. Please see the AnnouncementCAType model for higher level descriptions of the possible types  Possible values are:  - from the `dividend` type:   - **cash**      A cash payment based on the number of shares the account holds on the record date.   - **stock**      A stock payment based on the number of shares the account holds on the record date.  - from the `merger` type:   - **merger_update**      An update to the terms of an upcoming merger. This can happen any number of times before the merger is completed and can be tracked by using the id parameter.    - **merger_completion**      A final update in the terms of the merger in which the intiating_symbol will acquire the target_symbol. Any previous terms updates for this announcement will have the same id value.  - from the `split` type:   - **stock_split**      An increase in the number of shares outstanding with a decrease in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the split   - **until_split**      An increase in the number of shares outstanding with a decrease in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the split.   - **reverse_split**      A decrease in the number of shares outstanding with an increase in the dollar value of each share. The new_rate and old_rate parameters will be returned in order to derive the ratio of the spli   - **recapitalization**      A stock recapitalization, typically used by a company to adjust debt and equity ratios.  - from the `spinoff` type:   - **spinoff**      A disbursement of a newly tradable security when the intiating_symbol creates the target_symbol.
  """

  @derive Jason.Encoder
  defstruct [
    
  ]

  @type t :: %__MODULE__{
    
  }

  def decode(value) do
    value
  end
end

